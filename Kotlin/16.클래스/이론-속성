16. 클래스 - 속성(Property)
class User7 {
    val age: Int
        get() {
            본문
        }
        set(value: Int) {
            본문
        }
    val name: String

    constructor(age: Int, name: String) {
        this.age = age
        this.name = name
    }
}
-> 속성: age, name
val USER = User7(20, "홍길동")
-> println(user.age) -> age라는 속성에 접근

1. getter/setter
- getter: 클래스의 속성에 접근할 때
- setter: 클래스의 속성의 값을 설정할 때
- 기본적으로 코틀린이 제공을 해주지만, 특별한 기능을 추가하고 싶을 경우에는 개발자가 직접 작성 가능

2. lateinit
class User7 {
    lateinit var age: Int
    lateinit var name: String
}
- var로 선언한 프로퍼티에만 적용 가능
- 주 생성자에서는 사용 불가
- getter/setter 커스터마이징 불가
- nullable에는 적용 불가
- 기초타입 프로퍼티에는 적용 불가
    - 원시자료형(primitive type)
- lateinit 속성을 사용할 때에는 isInitialized로 초기화 여부를 확인

더블콜론(::)
- Reflection 기능
- 런타임에 프로그램의 구조를 조사할 수 있는 기능
- lateinit의 초기화 여부는 런타임이 아니면 알 수 없음

3. lazy
- 초기화를 미루고 미루고 미뤄서 정말로 필요한 순간(접근할 때)에 초기화
- lazy 속성은 선언이 될 때 혹은 init블록에서가 아니라 실제로 속성에 접근할 때 초기화가 이루어짐
class Computer {
    val ram: Ram =
}
